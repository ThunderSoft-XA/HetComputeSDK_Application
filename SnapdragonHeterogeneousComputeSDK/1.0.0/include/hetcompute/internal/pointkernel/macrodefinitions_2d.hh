#pragma once
  // This file is auto-generated by test/scripts/genpointkernelmacros.pl

// %mint: pause
#ifdef HETCOMPUTE_HAVE_QTI_DSP
 // Macro Expansion for 2 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_2  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_2(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 3 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_3  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_3(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 4 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_4  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_4(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 5 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_5  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_5(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 6 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_6  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_6(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 7 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_7  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_7(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 8 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_8  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_8(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 9 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_9  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_9(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 10 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_10  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_10(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 11 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_11  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_11(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 12 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_12  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_12(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 13 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_13  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_13(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 14 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_14  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_14(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 15 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_15  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_15(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 16 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_16  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_16(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 17 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_17  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_17(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 18 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_18  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_18(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 19 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_19  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_19(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 20 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_20  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_20(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 21 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_21  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_21(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 22 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_22  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_22(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
      , #arg22_type, #arg22_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 23 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_23  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_23(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
      , #arg22_type, #arg22_name \
      , #arg23_type, #arg23_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 24 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_24  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_24(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
      , #arg22_type, #arg22_name \
      , #arg23_type, #arg23_name \
      , #arg24_type, #arg24_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 25 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_25  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_25(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , arg25_type, arg25_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
      , #arg22_type, #arg22_name \
      , #arg23_type, #arg23_name \
      , #arg24_type, #arg24_name \
      , #arg25_type, #arg25_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
      , arg25_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 26 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_26  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_26(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , arg25_type, arg25_name \
    , arg26_type, arg26_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
      , #arg22_type, #arg22_name \
      , #arg23_type, #arg23_name \
      , #arg24_type, #arg24_name \
      , #arg25_type, #arg25_name \
      , #arg26_type, #arg26_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
      , arg25_type \
      , arg26_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 27 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_27  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_27(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , arg25_type, arg25_name \
    , arg26_type, arg26_name \
    , arg27_type, arg27_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
      , arg27_type arg27_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
      , #arg22_type, #arg22_name \
      , #arg23_type, #arg23_name \
      , #arg24_type, #arg24_name \
      , #arg25_type, #arg25_name \
      , #arg26_type, #arg26_name \
      , #arg27_type, #arg27_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
      , arg27_type arg27_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
      , arg25_type \
      , arg26_type \
      , arg27_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 28 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_28  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_28(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , arg25_type, arg25_name \
    , arg26_type, arg26_name \
    , arg27_type, arg27_name \
    , arg28_type, arg28_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
      , arg27_type arg27_name \
      , arg28_type arg28_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
      , #arg22_type, #arg22_name \
      , #arg23_type, #arg23_name \
      , #arg24_type, #arg24_name \
      , #arg25_type, #arg25_name \
      , #arg26_type, #arg26_name \
      , #arg27_type, #arg27_name \
      , #arg28_type, #arg28_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
      , arg27_type arg27_name \
      , arg28_type arg28_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
      , arg25_type \
      , arg26_type \
      , arg27_type \
      , arg28_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 29 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_29  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_29(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , arg25_type, arg25_name \
    , arg26_type, arg26_name \
    , arg27_type, arg27_name \
    , arg28_type, arg28_name \
    , arg29_type, arg29_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
      , arg27_type arg27_name \
      , arg28_type arg28_name \
      , arg29_type arg29_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
      , #arg22_type, #arg22_name \
      , #arg23_type, #arg23_name \
      , #arg24_type, #arg24_name \
      , #arg25_type, #arg25_name \
      , #arg26_type, #arg26_name \
      , #arg27_type, #arg27_name \
      , #arg28_type, #arg28_name \
      , #arg29_type, #arg29_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
      , arg27_type arg27_name \
      , arg28_type arg28_name \
      , arg29_type arg29_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
      , arg25_type \
      , arg26_type \
      , arg27_type \
      , arg28_type \
      , arg29_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 30 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_30  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_30(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , arg25_type, arg25_name \
    , arg26_type, arg26_name \
    , arg27_type, arg27_name \
    , arg28_type, arg28_name \
    , arg29_type, arg29_name \
    , arg30_type, arg30_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
      , arg27_type arg27_name \
      , arg28_type arg28_name \
      , arg29_type arg29_name \
      , arg30_type arg30_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
      , #arg22_type, #arg22_name \
      , #arg23_type, #arg23_name \
      , #arg24_type, #arg24_name \
      , #arg25_type, #arg25_name \
      , #arg26_type, #arg26_name \
      , #arg27_type, #arg27_name \
      , #arg28_type, #arg28_name \
      , #arg29_type, #arg29_name \
      , #arg30_type, #arg30_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  extern "C" int hetcompute_dsp_##fname (index_type first_x, index_type last_x, index_type first_y, index_type last_y \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
      , arg27_type arg27_name \
      , arg28_type arg28_name \
      , arg29_type arg29_name \
      , arg30_type arg30_name \
  ); \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
      , arg25_type \
      , arg26_type \
      , arg27_type \
      , arg28_type \
      , arg29_type \
      , arg30_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
        , hetcompute_dsp_##fname \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

#else //HETCOMPUTE_HAVE_QTI_DSP
#ifdef HETCOMPUTE_HAVE_OPENCL
 // Macro Expansion for 2 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_2  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_2(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 3 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_3  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_3(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 4 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_4  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_4(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 5 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_5  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_5(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 6 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_6  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_6(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 7 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_7  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_7(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 8 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_8  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_8(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 9 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_9  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_9(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 10 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_10  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_10(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 11 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_11  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_11(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 12 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_12  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_12(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 13 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_13  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_13(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 14 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_14  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_14(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 15 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_15  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_15(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 16 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_16  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_16(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 17 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_17  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_17(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 18 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_18  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_18(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 19 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_19  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_19(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 20 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_20  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_20(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 21 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_21  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_21(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 22 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_22  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_22(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
      , #arg22_type, #arg22_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 23 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_23  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_23(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
      , #arg22_type, #arg22_name \
      , #arg23_type, #arg23_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 24 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_24  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_24(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
      , #arg22_type, #arg22_name \
      , #arg23_type, #arg23_name \
      , #arg24_type, #arg24_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 25 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_25  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_25(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , arg25_type, arg25_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
      , #arg22_type, #arg22_name \
      , #arg23_type, #arg23_name \
      , #arg24_type, #arg24_name \
      , #arg25_type, #arg25_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
      , arg25_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 26 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_26  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_26(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , arg25_type, arg25_name \
    , arg26_type, arg26_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
      , #arg22_type, #arg22_name \
      , #arg23_type, #arg23_name \
      , #arg24_type, #arg24_name \
      , #arg25_type, #arg25_name \
      , #arg26_type, #arg26_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
      , arg25_type \
      , arg26_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 27 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_27  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_27(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , arg25_type, arg25_name \
    , arg26_type, arg26_name \
    , arg27_type, arg27_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
      , arg27_type arg27_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
      , #arg22_type, #arg22_name \
      , #arg23_type, #arg23_name \
      , #arg24_type, #arg24_name \
      , #arg25_type, #arg25_name \
      , #arg26_type, #arg26_name \
      , #arg27_type, #arg27_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
      , arg25_type \
      , arg26_type \
      , arg27_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 28 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_28  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_28(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , arg25_type, arg25_name \
    , arg26_type, arg26_name \
    , arg27_type, arg27_name \
    , arg28_type, arg28_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
      , arg27_type arg27_name \
      , arg28_type arg28_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
      , #arg22_type, #arg22_name \
      , #arg23_type, #arg23_name \
      , #arg24_type, #arg24_name \
      , #arg25_type, #arg25_name \
      , #arg26_type, #arg26_name \
      , #arg27_type, #arg27_name \
      , #arg28_type, #arg28_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
      , arg25_type \
      , arg26_type \
      , arg27_type \
      , arg28_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 29 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_29  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_29(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , arg25_type, arg25_name \
    , arg26_type, arg26_name \
    , arg27_type, arg27_name \
    , arg28_type, arg28_name \
    , arg29_type, arg29_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
      , arg27_type arg27_name \
      , arg28_type arg28_name \
      , arg29_type arg29_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
      , #arg22_type, #arg22_name \
      , #arg23_type, #arg23_name \
      , #arg24_type, #arg24_name \
      , #arg25_type, #arg25_name \
      , #arg26_type, #arg26_name \
      , #arg27_type, #arg27_name \
      , #arg28_type, #arg28_name \
      , #arg29_type, #arg29_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
      , arg25_type \
      , arg26_type \
      , arg27_type \
      , arg28_type \
      , arg29_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 30 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_30  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_30(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , arg25_type, arg25_name \
    , arg26_type, arg26_name \
    , arg27_type, arg27_name \
    , arg28_type, arg28_name \
    , arg29_type, arg29_name \
    , arg30_type, arg30_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
      , arg27_type arg27_name \
      , arg28_type arg28_name \
      , arg29_type arg29_name \
      , arg30_type arg30_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  std::string fname##_name_string = " __kernel void " + std::string(#fname) + "_gpu"; \
  std::string fname##_gpu_arg_signature = ::hetcompute::internal::pointkernel::gpu_gen_signature( #arg1_type, #arg1_name \
      , #arg2_type, #arg2_name \
      , #arg3_type, #arg3_name \
      , #arg4_type, #arg4_name \
      , #arg5_type, #arg5_name \
      , #arg6_type, #arg6_name \
      , #arg7_type, #arg7_name \
      , #arg8_type, #arg8_name \
      , #arg9_type, #arg9_name \
      , #arg10_type, #arg10_name \
      , #arg11_type, #arg11_name \
      , #arg12_type, #arg12_name \
      , #arg13_type, #arg13_name \
      , #arg14_type, #arg14_name \
      , #arg15_type, #arg15_name \
      , #arg16_type, #arg16_name \
      , #arg17_type, #arg17_name \
      , #arg18_type, #arg18_name \
      , #arg19_type, #arg19_name \
      , #arg20_type, #arg20_name \
      , #arg21_type, #arg21_name \
      , #arg22_type, #arg22_name \
      , #arg23_type, #arg23_name \
      , #arg24_type, #arg24_name \
      , #arg25_type, #arg25_name \
      , #arg26_type, #arg26_name \
      , #arg27_type, #arg27_name \
      , #arg28_type, #arg28_name \
      , #arg29_type, #arg29_name \
      , #arg30_type, #arg30_name \
  ); \
  std::string fname##_body = "{int " #index_x " = get_global_id(0); \
      int " #index_y " = get_global_id(1); " +  std::string(#__VA_ARGS__) + "}"; \
  std::string fname##_string = fname##_name_string + fname##_gpu_arg_signature + fname##_body; \
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
      , arg25_type \
      , arg26_type \
      , arg27_type \
      , arg28_type \
      , arg29_type \
      , arg30_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
        , std::string(#fname) + "_gpu" \
        , global_string + fname##_string \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

#else //HETCOMPUTE_HAVE_OPENCL
 // Macro Expansion for 2 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_2  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_2(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 3 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_3  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_3(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 4 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_4  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_4(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 5 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_5  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_5(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 6 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_6  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_6(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 7 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_7  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_7(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 8 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_8  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_8(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 9 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_9  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_9(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 10 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_10  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_10(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 11 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_11  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_11(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 12 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_12  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_12(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 13 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_13  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_13(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 14 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_14  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_14(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 15 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_15  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_15(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 16 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_16  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_16(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 17 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_17  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_17(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 18 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_18  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_18(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 19 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_19  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_19(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 20 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_20  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_20(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 21 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_21  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_21(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 22 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_22  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_22(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 23 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_23  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_23(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 24 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_24  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_24(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 25 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_25  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_25(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , arg25_type, arg25_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
      , arg25_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 26 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_26  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_26(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , arg25_type, arg25_name \
    , arg26_type, arg26_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
      , arg25_type \
      , arg26_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 27 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_27  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_27(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , arg25_type, arg25_name \
    , arg26_type, arg26_name \
    , arg27_type, arg27_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
      , arg27_type arg27_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
      , arg25_type \
      , arg26_type \
      , arg27_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 28 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_28  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_28(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , arg25_type, arg25_name \
    , arg26_type, arg26_name \
    , arg27_type, arg27_name \
    , arg28_type, arg28_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
      , arg27_type arg27_name \
      , arg28_type arg28_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
      , arg25_type \
      , arg26_type \
      , arg27_type \
      , arg28_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 29 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_29  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_29(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , arg25_type, arg25_name \
    , arg26_type, arg26_name \
    , arg27_type, arg27_name \
    , arg28_type, arg28_name \
    , arg29_type, arg29_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
      , arg27_type arg27_name \
      , arg28_type arg28_name \
      , arg29_type arg29_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
      , arg25_type \
      , arg26_type \
      , arg27_type \
      , arg28_type \
      , arg29_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

 // Macro Expansion for 30 arguments 
#undef HETCOMPUTE_POINT_KERNEL_2D_30  // undefine any previous versions

#define HETCOMPUTE_POINT_KERNEL_2D_30(fname, index_type, index_x, index_y, first_x, last_x, first_y, last_y \
    , arg1_type, arg1_name \
    , arg2_type, arg2_name \
    , arg3_type, arg3_name \
    , arg4_type, arg4_name \
    , arg5_type, arg5_name \
    , arg6_type, arg6_name \
    , arg7_type, arg7_name \
    , arg8_type, arg8_name \
    , arg9_type, arg9_name \
    , arg10_type, arg10_name \
    , arg11_type, arg11_name \
    , arg12_type, arg12_name \
    , arg13_type, arg13_name \
    , arg14_type, arg14_name \
    , arg15_type, arg15_name \
    , arg16_type, arg16_name \
    , arg17_type, arg17_name \
    , arg18_type, arg18_name \
    , arg19_type, arg19_name \
    , arg20_type, arg20_name \
    , arg21_type, arg21_name \
    , arg22_type, arg22_name \
    , arg23_type, arg23_name \
    , arg24_type, arg24_name \
    , arg25_type, arg25_name \
    , arg26_type, arg26_name \
    , arg27_type, arg27_name \
    , arg28_type, arg28_name \
    , arg29_type, arg29_name \
    , arg30_type, arg30_name \
    , ...) \
namespace hetcompute{\
  static long fname##_cpu (hetcompute::range<2> r, hetcompute::pattern::tuner t \
      , arg1_type arg1_name \
      , arg2_type arg2_name \
      , arg3_type arg3_name \
      , arg4_type arg4_name \
      , arg5_type arg5_name \
      , arg6_type arg6_name \
      , arg7_type arg7_name \
      , arg8_type arg8_name \
      , arg9_type arg9_name \
      , arg10_type arg10_name \
      , arg11_type arg11_name \
      , arg12_type arg12_name \
      , arg13_type arg13_name \
      , arg14_type arg14_name \
      , arg15_type arg15_name \
      , arg16_type arg16_name \
      , arg17_type arg17_name \
      , arg18_type arg18_name \
      , arg19_type arg19_name \
      , arg20_type arg20_name \
      , arg21_type arg21_name \
      , arg22_type arg22_name \
      , arg23_type arg23_name \
      , arg24_type arg24_name \
      , arg25_type arg25_name \
      , arg26_type arg26_name \
      , arg27_type arg27_name \
      , arg28_type arg28_name \
      , arg29_type arg29_name \
      , arg30_type arg30_name \
    ){ \
    index_type first_x = r.begin(0); \
    index_type last_x = r.end(0); \
    index_type first_y = r.begin(1); \
    index_type last_y = r.end(1); \
    hetcompute::pfor_each(first_x, last_x, [&](index_type index_x) {\
        for(index_type index_y = first_y; index_y < last_y; ++index_y) { \
          __VA_ARGS__ \
        } \
      }, t \
    ); \
    return 0; \
  }\
  using fname##_pk_type = ::hetcompute::internal::pointkernel::pointkernel<long,hetcompute::range<2> \
      , arg1_type \
      , arg2_type \
      , arg3_type \
      , arg4_type \
      , arg5_type \
      , arg6_type \
      , arg7_type \
      , arg8_type \
      , arg9_type \
      , arg10_type \
      , arg11_type \
      , arg12_type \
      , arg13_type \
      , arg14_type \
      , arg15_type \
      , arg16_type \
      , arg17_type \
      , arg18_type \
      , arg19_type \
      , arg20_type \
      , arg21_type \
      , arg22_type \
      , arg23_type \
      , arg24_type \
      , arg25_type \
      , arg26_type \
      , arg27_type \
      , arg28_type \
      , arg29_type \
      , arg30_type \
  >; \
  static fname##_pk_type gen_##fname##_obj(std::string global_string){ \
    static fname##_pk_type obj(fname##_cpu \
    ); \
    return obj;\
   }\
  constexpr size_t fname##_id = __COUNTER__; \
  using fname##_type = std::tuple<fname##_pk_type, std::integral_constant<size_t, fname##_id>>; \
  namespace beta{\
    template<> \
      fname##_pk_type create_point_kernel<fname##_type>(std::string global_string){ \
      return gen_##fname##_obj(global_string); \
    }\
  }\
}

#endif // HETCOMPUTE_HAVE_OPENCL
#endif // HETCOMPUTE_HAVE_QTI_DSP
// %mint: resume
