#pragma once
  // This file is auto-generated by test/scripts/genpointkernelmacros.pl

  // All of the following macros SHOULD be invoked as functions in the pointkernel description

  // Note: Please refer to the OpenCL manual for the list of legal conversions between types

typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;

#define convert_char(x) static_cast<char>(x)
#define convert_uchar(x) static_cast<uchar>(x)
#define convert_short(x) static_cast<short>(x)
#define convert_ushort(x) static_cast<ushort>(x)
#define convert_int(x) static_cast<int>(x)
#define convert_uint(x) static_cast<uint>(x)
#define convert_long(x) static_cast<long>(x)
#define convert_ulong(x) static_cast<ulong>(x)
#define convert_float(x) static_cast<float>(x)
#define convert_double(x) static_cast<double>(x)

#define convert_char2(x) hetcompute::char2({static_cast<char>(x.s[0]), static_cast<char>(x.s[1])})
#define convert_uchar2(x) hetcompute::uchar2({static_cast<uchar>(x.s[0]), static_cast<uchar>(x.s[1])})
#define convert_short2(x) hetcompute::short2({static_cast<short>(x.s[0]), static_cast<short>(x.s[1])})
#define convert_ushort2(x) hetcompute::ushort2({static_cast<ushort>(x.s[0]), static_cast<ushort>(x.s[1])})
#define convert_int2(x) hetcompute::int2({static_cast<int>(x.s[0]), static_cast<int>(x.s[1])})
#define convert_uint2(x) hetcompute::uint2({static_cast<uint>(x.s[0]), static_cast<uint>(x.s[1])})
#define convert_long2(x) hetcompute::long2({static_cast<long>(x.s[0]), static_cast<long>(x.s[1])})
#define convert_ulong2(x) hetcompute::ulong2({static_cast<ulong>(x.s[0]), static_cast<ulong>(x.s[1])})
#define convert_float2(x) hetcompute::float2({static_cast<float>(x.s[0]), static_cast<float>(x.s[1])})
#define convert_double2(x) hetcompute::double2({static_cast<double>(x.s[0]), static_cast<double>(x.s[1])})


#define convert_char3(x) hetcompute::char3({static_cast<char>(x.s[0]), static_cast<char>(x.s[1]), static_cast<char>(x.s[2])})
#define convert_uchar3(x) hetcompute::uchar3({static_cast<uchar>(x.s[0]), static_cast<uchar>(x.s[1]), static_cast<uchar>(x.s[2])})
#define convert_short3(x) hetcompute::short3({static_cast<short>(x.s[0]), static_cast<short>(x.s[1]), static_cast<short>(x.s[2])})
#define convert_ushort3(x) hetcompute::ushort3({static_cast<ushort>(x.s[0]), static_cast<ushort>(x.s[1]), static_cast<ushort>(x.s[2])})
#define convert_int3(x) hetcompute::int3({static_cast<int>(x.s[0]), static_cast<int>(x.s[1]), static_cast<int>(x.s[2])})
#define convert_uint3(x) hetcompute::uint3({static_cast<uint>(x.s[0]), static_cast<uint>(x.s[1]), static_cast<uint>(x.s[2])})
#define convert_long3(x) hetcompute::long3({static_cast<long>(x.s[0]), static_cast<long>(x.s[1]), static_cast<long>(x.s[2])})
#define convert_ulong3(x) hetcompute::ulong3({static_cast<ulong>(x.s[0]), static_cast<ulong>(x.s[1]), static_cast<ulong>(x.s[2])})
#define convert_float3(x) hetcompute::float3({static_cast<float>(x.s[0]), static_cast<float>(x.s[1]), static_cast<float>(x.s[2])})
#define convert_double3(x) hetcompute::double3({static_cast<double>(x.s[0]), static_cast<double>(x.s[1]), static_cast<double>(x.s[2])})


#define convert_char4(x) hetcompute::char4({static_cast<char>(x.s[0]), static_cast<char>(x.s[1]), static_cast<char>(x.s[2]), static_cast<char>(x.s[3])})
#define convert_uchar4(x) hetcompute::uchar4({static_cast<uchar>(x.s[0]), static_cast<uchar>(x.s[1]), static_cast<uchar>(x.s[2]), static_cast<uchar>(x.s[3])})
#define convert_short4(x) hetcompute::short4({static_cast<short>(x.s[0]), static_cast<short>(x.s[1]), static_cast<short>(x.s[2]), static_cast<short>(x.s[3])})
#define convert_ushort4(x) hetcompute::ushort4({static_cast<ushort>(x.s[0]), static_cast<ushort>(x.s[1]), static_cast<ushort>(x.s[2]), static_cast<ushort>(x.s[3])})
#define convert_int4(x) hetcompute::int4({static_cast<int>(x.s[0]), static_cast<int>(x.s[1]), static_cast<int>(x.s[2]), static_cast<int>(x.s[3])})
#define convert_uint4(x) hetcompute::uint4({static_cast<uint>(x.s[0]), static_cast<uint>(x.s[1]), static_cast<uint>(x.s[2]), static_cast<uint>(x.s[3])})
#define convert_long4(x) hetcompute::long4({static_cast<long>(x.s[0]), static_cast<long>(x.s[1]), static_cast<long>(x.s[2]), static_cast<long>(x.s[3])})
#define convert_ulong4(x) hetcompute::ulong4({static_cast<ulong>(x.s[0]), static_cast<ulong>(x.s[1]), static_cast<ulong>(x.s[2]), static_cast<ulong>(x.s[3])})
#define convert_float4(x) hetcompute::float4({static_cast<float>(x.s[0]), static_cast<float>(x.s[1]), static_cast<float>(x.s[2]), static_cast<float>(x.s[3])})
#define convert_double4(x) hetcompute::double4({static_cast<double>(x.s[0]), static_cast<double>(x.s[1]), static_cast<double>(x.s[2]), static_cast<double>(x.s[3])})


#define convert_char8(x) hetcompute::char8({static_cast<char>(x.s[0]), static_cast<char>(x.s[1]), static_cast<char>(x.s[2]), static_cast<char>(x.s[3]), static_cast<char>(x.s[4]), static_cast<char>(x.s[5]), static_cast<char>(x.s[6]), static_cast<char>(x.s[7])})
#define convert_uchar8(x) hetcompute::uchar8({static_cast<uchar>(x.s[0]), static_cast<uchar>(x.s[1]), static_cast<uchar>(x.s[2]), static_cast<uchar>(x.s[3]), static_cast<uchar>(x.s[4]), static_cast<uchar>(x.s[5]), static_cast<uchar>(x.s[6]), static_cast<uchar>(x.s[7])})
#define convert_short8(x) hetcompute::short8({static_cast<short>(x.s[0]), static_cast<short>(x.s[1]), static_cast<short>(x.s[2]), static_cast<short>(x.s[3]), static_cast<short>(x.s[4]), static_cast<short>(x.s[5]), static_cast<short>(x.s[6]), static_cast<short>(x.s[7])})
#define convert_ushort8(x) hetcompute::ushort8({static_cast<ushort>(x.s[0]), static_cast<ushort>(x.s[1]), static_cast<ushort>(x.s[2]), static_cast<ushort>(x.s[3]), static_cast<ushort>(x.s[4]), static_cast<ushort>(x.s[5]), static_cast<ushort>(x.s[6]), static_cast<ushort>(x.s[7])})
#define convert_int8(x) hetcompute::int8({static_cast<int>(x.s[0]), static_cast<int>(x.s[1]), static_cast<int>(x.s[2]), static_cast<int>(x.s[3]), static_cast<int>(x.s[4]), static_cast<int>(x.s[5]), static_cast<int>(x.s[6]), static_cast<int>(x.s[7])})
#define convert_uint8(x) hetcompute::uint8({static_cast<uint>(x.s[0]), static_cast<uint>(x.s[1]), static_cast<uint>(x.s[2]), static_cast<uint>(x.s[3]), static_cast<uint>(x.s[4]), static_cast<uint>(x.s[5]), static_cast<uint>(x.s[6]), static_cast<uint>(x.s[7])})
#define convert_long8(x) hetcompute::long8({static_cast<long>(x.s[0]), static_cast<long>(x.s[1]), static_cast<long>(x.s[2]), static_cast<long>(x.s[3]), static_cast<long>(x.s[4]), static_cast<long>(x.s[5]), static_cast<long>(x.s[6]), static_cast<long>(x.s[7])})
#define convert_ulong8(x) hetcompute::ulong8({static_cast<ulong>(x.s[0]), static_cast<ulong>(x.s[1]), static_cast<ulong>(x.s[2]), static_cast<ulong>(x.s[3]), static_cast<ulong>(x.s[4]), static_cast<ulong>(x.s[5]), static_cast<ulong>(x.s[6]), static_cast<ulong>(x.s[7])})
#define convert_float8(x) hetcompute::float8({static_cast<float>(x.s[0]), static_cast<float>(x.s[1]), static_cast<float>(x.s[2]), static_cast<float>(x.s[3]), static_cast<float>(x.s[4]), static_cast<float>(x.s[5]), static_cast<float>(x.s[6]), static_cast<float>(x.s[7])})
#define convert_double8(x) hetcompute::double8({static_cast<double>(x.s[0]), static_cast<double>(x.s[1]), static_cast<double>(x.s[2]), static_cast<double>(x.s[3]), static_cast<double>(x.s[4]), static_cast<double>(x.s[5]), static_cast<double>(x.s[6]), static_cast<double>(x.s[7])})


#define convert_char16(x) hetcompute::char16({static_cast<char>(x.s[0]), static_cast<char>(x.s[1]), static_cast<char>(x.s[2]), static_cast<char>(x.s[3]), static_cast<char>(x.s[4]), static_cast<char>(x.s[5]), static_cast<char>(x.s[6]), static_cast<char>(x.s[7]), static_cast<char>(x.s[8]), static_cast<char>(x.s[9]), static_cast<char>(x.s[10]), static_cast<char>(x.s[11]), static_cast<char>(x.s[12]), static_cast<char>(x.s[13]), static_cast<char>(x.s[14]), static_cast<char>(x.s[15])})
#define convert_uchar16(x) hetcompute::uchar16({static_cast<uchar>(x.s[0]), static_cast<uchar>(x.s[1]), static_cast<uchar>(x.s[2]), static_cast<uchar>(x.s[3]), static_cast<uchar>(x.s[4]), static_cast<uchar>(x.s[5]), static_cast<uchar>(x.s[6]), static_cast<uchar>(x.s[7]), static_cast<uchar>(x.s[8]), static_cast<uchar>(x.s[9]), static_cast<uchar>(x.s[10]), static_cast<uchar>(x.s[11]), static_cast<uchar>(x.s[12]), static_cast<uchar>(x.s[13]), static_cast<uchar>(x.s[14]), static_cast<uchar>(x.s[15])})
#define convert_short16(x) hetcompute::short16({static_cast<short>(x.s[0]), static_cast<short>(x.s[1]), static_cast<short>(x.s[2]), static_cast<short>(x.s[3]), static_cast<short>(x.s[4]), static_cast<short>(x.s[5]), static_cast<short>(x.s[6]), static_cast<short>(x.s[7]), static_cast<short>(x.s[8]), static_cast<short>(x.s[9]), static_cast<short>(x.s[10]), static_cast<short>(x.s[11]), static_cast<short>(x.s[12]), static_cast<short>(x.s[13]), static_cast<short>(x.s[14]), static_cast<short>(x.s[15])})
#define convert_ushort16(x) hetcompute::ushort16({static_cast<ushort>(x.s[0]), static_cast<ushort>(x.s[1]), static_cast<ushort>(x.s[2]), static_cast<ushort>(x.s[3]), static_cast<ushort>(x.s[4]), static_cast<ushort>(x.s[5]), static_cast<ushort>(x.s[6]), static_cast<ushort>(x.s[7]), static_cast<ushort>(x.s[8]), static_cast<ushort>(x.s[9]), static_cast<ushort>(x.s[10]), static_cast<ushort>(x.s[11]), static_cast<ushort>(x.s[12]), static_cast<ushort>(x.s[13]), static_cast<ushort>(x.s[14]), static_cast<ushort>(x.s[15])})
#define convert_int16(x) hetcompute::int16({static_cast<int>(x.s[0]), static_cast<int>(x.s[1]), static_cast<int>(x.s[2]), static_cast<int>(x.s[3]), static_cast<int>(x.s[4]), static_cast<int>(x.s[5]), static_cast<int>(x.s[6]), static_cast<int>(x.s[7]), static_cast<int>(x.s[8]), static_cast<int>(x.s[9]), static_cast<int>(x.s[10]), static_cast<int>(x.s[11]), static_cast<int>(x.s[12]), static_cast<int>(x.s[13]), static_cast<int>(x.s[14]), static_cast<int>(x.s[15])})
#define convert_uint16(x) hetcompute::uint16({static_cast<uint>(x.s[0]), static_cast<uint>(x.s[1]), static_cast<uint>(x.s[2]), static_cast<uint>(x.s[3]), static_cast<uint>(x.s[4]), static_cast<uint>(x.s[5]), static_cast<uint>(x.s[6]), static_cast<uint>(x.s[7]), static_cast<uint>(x.s[8]), static_cast<uint>(x.s[9]), static_cast<uint>(x.s[10]), static_cast<uint>(x.s[11]), static_cast<uint>(x.s[12]), static_cast<uint>(x.s[13]), static_cast<uint>(x.s[14]), static_cast<uint>(x.s[15])})
#define convert_long16(x) hetcompute::long16({static_cast<long>(x.s[0]), static_cast<long>(x.s[1]), static_cast<long>(x.s[2]), static_cast<long>(x.s[3]), static_cast<long>(x.s[4]), static_cast<long>(x.s[5]), static_cast<long>(x.s[6]), static_cast<long>(x.s[7]), static_cast<long>(x.s[8]), static_cast<long>(x.s[9]), static_cast<long>(x.s[10]), static_cast<long>(x.s[11]), static_cast<long>(x.s[12]), static_cast<long>(x.s[13]), static_cast<long>(x.s[14]), static_cast<long>(x.s[15])})
#define convert_ulong16(x) hetcompute::ulong16({static_cast<ulong>(x.s[0]), static_cast<ulong>(x.s[1]), static_cast<ulong>(x.s[2]), static_cast<ulong>(x.s[3]), static_cast<ulong>(x.s[4]), static_cast<ulong>(x.s[5]), static_cast<ulong>(x.s[6]), static_cast<ulong>(x.s[7]), static_cast<ulong>(x.s[8]), static_cast<ulong>(x.s[9]), static_cast<ulong>(x.s[10]), static_cast<ulong>(x.s[11]), static_cast<ulong>(x.s[12]), static_cast<ulong>(x.s[13]), static_cast<ulong>(x.s[14]), static_cast<ulong>(x.s[15])})
#define convert_float16(x) hetcompute::float16({static_cast<float>(x.s[0]), static_cast<float>(x.s[1]), static_cast<float>(x.s[2]), static_cast<float>(x.s[3]), static_cast<float>(x.s[4]), static_cast<float>(x.s[5]), static_cast<float>(x.s[6]), static_cast<float>(x.s[7]), static_cast<float>(x.s[8]), static_cast<float>(x.s[9]), static_cast<float>(x.s[10]), static_cast<float>(x.s[11]), static_cast<float>(x.s[12]), static_cast<float>(x.s[13]), static_cast<float>(x.s[14]), static_cast<float>(x.s[15])})
#define convert_double16(x) hetcompute::double16({static_cast<double>(x.s[0]), static_cast<double>(x.s[1]), static_cast<double>(x.s[2]), static_cast<double>(x.s[3]), static_cast<double>(x.s[4]), static_cast<double>(x.s[5]), static_cast<double>(x.s[6]), static_cast<double>(x.s[7]), static_cast<double>(x.s[8]), static_cast<double>(x.s[9]), static_cast<double>(x.s[10]), static_cast<double>(x.s[11]), static_cast<double>(x.s[12]), static_cast<double>(x.s[13]), static_cast<double>(x.s[14]), static_cast<double>(x.s[15])})


// Macros for reinterpreting types 

#define as_char(x) *(reinterpret_cast<char*>(&x))
#define as_uchar(x) *(reinterpret_cast<uchar*>(&x))
#define as_short(x) *(reinterpret_cast<short*>(&x))
#define as_ushort(x) *(reinterpret_cast<ushort*>(&x))
#define as_int(x) *(reinterpret_cast<int*>(&x))
#define as_uint(x) *(reinterpret_cast<uint *>(&x))
#define as_long(x) *(reinterpret_cast<long*>(&x))
#define as_ulong(x) *(reinterpret_cast<ulong*>(&x))
#define as_float(x) *(reinterpret_cast<float*>(&x))
#define as_double(x) *(reinterpret_cast<double*>(&x))

#define as_char2(x) hetcompute::char2({*(reinterpret_cast<char*>(&x.s[0])), *(reinterpret_cast<char*>(&x.s[1]))})
#define as_uchar2(x) hetcompute::uchar2({*(reinterpret_cast<uchar*>(&x.s[0])), *(reinterpret_cast<uchar*>(&x.s[1]))})
#define as_short2(x) hetcompute::short2({*(reinterpret_cast<short*>(&x.s[0])), *(reinterpret_cast<short*>(&x.s[1]))})
#define as_ushort2(x) hetcompute::ushort2({*(reinterpret_cast<ushort*>(&x.s[0])), *(reinterpret_cast<ushort*>(&x.s[1]))})
#define as_int2(x) hetcompute::int2({*(reinterpret_cast<int*>(&x.s[0])), *(reinterpret_cast<int*>(&x.s[1]))})
#define as_uint2(x) hetcompute::uint2({*(reinterpret_cast<uint*>(&x.s[0])), *(reinterpret_cast<uint*>(&x.s[1]))})
#define as_long2(x) hetcompute::long2({*(reinterpret_cast<long*>(&x.s[0])), *(reinterpret_cast<long*>(&x.s[1]))})
#define as_ulong2(x) hetcompute::ulong2({*(reinterpret_cast<ulong*>(&x.s[0])), *(reinterpret_cast<ulong*>(&x.s[1]))})
#define as_float2(x) hetcompute::float2({*(reinterpret_cast<float*>(&x.s[0])), *(reinterpret_cast<float*>(&x.s[1]))})
#define as_double2(x) hetcompute::double2({*(reinterpret_cast<double*>(&x.s[0])), *(reinterpret_cast<double*>(&x.s[1]))})


#define as_char3(x) hetcompute::char3({*(reinterpret_cast<char*>(&x.s[0])), *(reinterpret_cast<char*>(&x.s[1])), *(reinterpret_cast<char*>(&x.s[2]))})
#define as_uchar3(x) hetcompute::uchar3({*(reinterpret_cast<uchar*>(&x.s[0])), *(reinterpret_cast<uchar*>(&x.s[1])), *(reinterpret_cast<uchar*>(&x.s[2]))})
#define as_short3(x) hetcompute::short3({*(reinterpret_cast<short*>(&x.s[0])), *(reinterpret_cast<short*>(&x.s[1])), *(reinterpret_cast<short*>(&x.s[2]))})
#define as_ushort3(x) hetcompute::ushort3({*(reinterpret_cast<ushort*>(&x.s[0])), *(reinterpret_cast<ushort*>(&x.s[1])), *(reinterpret_cast<ushort*>(&x.s[2]))})
#define as_int3(x) hetcompute::int3({*(reinterpret_cast<int*>(&x.s[0])), *(reinterpret_cast<int*>(&x.s[1])), *(reinterpret_cast<int*>(&x.s[2]))})
#define as_uint3(x) hetcompute::uint3({*(reinterpret_cast<uint*>(&x.s[0])), *(reinterpret_cast<uint*>(&x.s[1])), *(reinterpret_cast<uint*>(&x.s[2]))})
#define as_long3(x) hetcompute::long3({*(reinterpret_cast<long*>(&x.s[0])), *(reinterpret_cast<long*>(&x.s[1])), *(reinterpret_cast<long*>(&x.s[2]))})
#define as_ulong3(x) hetcompute::ulong3({*(reinterpret_cast<ulong*>(&x.s[0])), *(reinterpret_cast<ulong*>(&x.s[1])), *(reinterpret_cast<ulong*>(&x.s[2]))})
#define as_float3(x) hetcompute::float3({*(reinterpret_cast<float*>(&x.s[0])), *(reinterpret_cast<float*>(&x.s[1])), *(reinterpret_cast<float*>(&x.s[2]))})
#define as_double3(x) hetcompute::double3({*(reinterpret_cast<double*>(&x.s[0])), *(reinterpret_cast<double*>(&x.s[1])), *(reinterpret_cast<double*>(&x.s[2]))})


#define as_char4(x) hetcompute::char4({*(reinterpret_cast<char*>(&x.s[0])), *(reinterpret_cast<char*>(&x.s[1])), *(reinterpret_cast<char*>(&x.s[2])), *(reinterpret_cast<char*>(&x.s[3]))})
#define as_uchar4(x) hetcompute::uchar4({*(reinterpret_cast<uchar*>(&x.s[0])), *(reinterpret_cast<uchar*>(&x.s[1])), *(reinterpret_cast<uchar*>(&x.s[2])), *(reinterpret_cast<uchar*>(&x.s[3]))})
#define as_short4(x) hetcompute::short4({*(reinterpret_cast<short*>(&x.s[0])), *(reinterpret_cast<short*>(&x.s[1])), *(reinterpret_cast<short*>(&x.s[2])), *(reinterpret_cast<short*>(&x.s[3]))})
#define as_ushort4(x) hetcompute::ushort4({*(reinterpret_cast<ushort*>(&x.s[0])), *(reinterpret_cast<ushort*>(&x.s[1])), *(reinterpret_cast<ushort*>(&x.s[2])), *(reinterpret_cast<ushort*>(&x.s[3]))})
#define as_int4(x) hetcompute::int4({*(reinterpret_cast<int*>(&x.s[0])), *(reinterpret_cast<int*>(&x.s[1])), *(reinterpret_cast<int*>(&x.s[2])), *(reinterpret_cast<int*>(&x.s[3]))})
#define as_uint4(x) hetcompute::uint4({*(reinterpret_cast<uint*>(&x.s[0])), *(reinterpret_cast<uint*>(&x.s[1])), *(reinterpret_cast<uint*>(&x.s[2])), *(reinterpret_cast<uint*>(&x.s[3]))})
#define as_long4(x) hetcompute::long4({*(reinterpret_cast<long*>(&x.s[0])), *(reinterpret_cast<long*>(&x.s[1])), *(reinterpret_cast<long*>(&x.s[2])), *(reinterpret_cast<long*>(&x.s[3]))})
#define as_ulong4(x) hetcompute::ulong4({*(reinterpret_cast<ulong*>(&x.s[0])), *(reinterpret_cast<ulong*>(&x.s[1])), *(reinterpret_cast<ulong*>(&x.s[2])), *(reinterpret_cast<ulong*>(&x.s[3]))})
#define as_float4(x) hetcompute::float4({*(reinterpret_cast<float*>(&x.s[0])), *(reinterpret_cast<float*>(&x.s[1])), *(reinterpret_cast<float*>(&x.s[2])), *(reinterpret_cast<float*>(&x.s[3]))})
#define as_double4(x) hetcompute::double4({*(reinterpret_cast<double*>(&x.s[0])), *(reinterpret_cast<double*>(&x.s[1])), *(reinterpret_cast<double*>(&x.s[2])), *(reinterpret_cast<double*>(&x.s[3]))})


#define as_char8(x) hetcompute::char8({*(reinterpret_cast<char*>(&x.s[0])), *(reinterpret_cast<char*>(&x.s[1])), *(reinterpret_cast<char*>(&x.s[2])), *(reinterpret_cast<char*>(&x.s[3])), *(reinterpret_cast<char*>(&x.s[4])), *(reinterpret_cast<char*>(&x.s[5])), *(reinterpret_cast<char*>(&x.s[6])), *(reinterpret_cast<char*>(&x.s[7]))})
#define as_uchar8(x) hetcompute::uchar8({*(reinterpret_cast<uchar*>(&x.s[0])), *(reinterpret_cast<uchar*>(&x.s[1])), *(reinterpret_cast<uchar*>(&x.s[2])), *(reinterpret_cast<uchar*>(&x.s[3])), *(reinterpret_cast<uchar*>(&x.s[4])), *(reinterpret_cast<uchar*>(&x.s[5])), *(reinterpret_cast<uchar*>(&x.s[6])), *(reinterpret_cast<uchar*>(&x.s[7]))})
#define as_short8(x) hetcompute::short8({*(reinterpret_cast<short*>(&x.s[0])), *(reinterpret_cast<short*>(&x.s[1])), *(reinterpret_cast<short*>(&x.s[2])), *(reinterpret_cast<short*>(&x.s[3])), *(reinterpret_cast<short*>(&x.s[4])), *(reinterpret_cast<short*>(&x.s[5])), *(reinterpret_cast<short*>(&x.s[6])), *(reinterpret_cast<short*>(&x.s[7]))})
#define as_ushort8(x) hetcompute::ushort8({*(reinterpret_cast<ushort*>(&x.s[0])), *(reinterpret_cast<ushort*>(&x.s[1])), *(reinterpret_cast<ushort*>(&x.s[2])), *(reinterpret_cast<ushort*>(&x.s[3])), *(reinterpret_cast<ushort*>(&x.s[4])), *(reinterpret_cast<ushort*>(&x.s[5])), *(reinterpret_cast<ushort*>(&x.s[6])), *(reinterpret_cast<ushort*>(&x.s[7]))})
#define as_int8(x) hetcompute::int8({*(reinterpret_cast<int*>(&x.s[0])), *(reinterpret_cast<int*>(&x.s[1])), *(reinterpret_cast<int*>(&x.s[2])), *(reinterpret_cast<int*>(&x.s[3])), *(reinterpret_cast<int*>(&x.s[4])), *(reinterpret_cast<int*>(&x.s[5])), *(reinterpret_cast<int*>(&x.s[6])), *(reinterpret_cast<int*>(&x.s[7]))})
#define as_uint8(x) hetcompute::uint8({*(reinterpret_cast<uint*>(&x.s[0])), *(reinterpret_cast<uint*>(&x.s[1])), *(reinterpret_cast<uint*>(&x.s[2])), *(reinterpret_cast<uint*>(&x.s[3])), *(reinterpret_cast<uint*>(&x.s[4])), *(reinterpret_cast<uint*>(&x.s[5])), *(reinterpret_cast<uint*>(&x.s[6])), *(reinterpret_cast<uint*>(&x.s[7]))})
#define as_long8(x) hetcompute::long8({*(reinterpret_cast<long*>(&x.s[0])), *(reinterpret_cast<long*>(&x.s[1])), *(reinterpret_cast<long*>(&x.s[2])), *(reinterpret_cast<long*>(&x.s[3])), *(reinterpret_cast<long*>(&x.s[4])), *(reinterpret_cast<long*>(&x.s[5])), *(reinterpret_cast<long*>(&x.s[6])), *(reinterpret_cast<long*>(&x.s[7]))})
#define as_ulong8(x) hetcompute::ulong8({*(reinterpret_cast<ulong*>(&x.s[0])), *(reinterpret_cast<ulong*>(&x.s[1])), *(reinterpret_cast<ulong*>(&x.s[2])), *(reinterpret_cast<ulong*>(&x.s[3])), *(reinterpret_cast<ulong*>(&x.s[4])), *(reinterpret_cast<ulong*>(&x.s[5])), *(reinterpret_cast<ulong*>(&x.s[6])), *(reinterpret_cast<ulong*>(&x.s[7]))})
#define as_float8(x) hetcompute::float8({*(reinterpret_cast<float*>(&x.s[0])), *(reinterpret_cast<float*>(&x.s[1])), *(reinterpret_cast<float*>(&x.s[2])), *(reinterpret_cast<float*>(&x.s[3])), *(reinterpret_cast<float*>(&x.s[4])), *(reinterpret_cast<float*>(&x.s[5])), *(reinterpret_cast<float*>(&x.s[6])), *(reinterpret_cast<float*>(&x.s[7]))})
#define as_double8(x) hetcompute::double8({*(reinterpret_cast<double*>(&x.s[0])), *(reinterpret_cast<double*>(&x.s[1])), *(reinterpret_cast<double*>(&x.s[2])), *(reinterpret_cast<double*>(&x.s[3])), *(reinterpret_cast<double*>(&x.s[4])), *(reinterpret_cast<double*>(&x.s[5])), *(reinterpret_cast<double*>(&x.s[6])), *(reinterpret_cast<double*>(&x.s[7]))})


#define as_char16(x) hetcompute::char16({*(reinterpret_cast<char*>(&x.s[0])), *(reinterpret_cast<char*>(&x.s[1])), *(reinterpret_cast<char*>(&x.s[2])), *(reinterpret_cast<char*>(&x.s[3])), *(reinterpret_cast<char*>(&x.s[4])), *(reinterpret_cast<char*>(&x.s[5])), *(reinterpret_cast<char*>(&x.s[6])), *(reinterpret_cast<char*>(&x.s[7])), *(reinterpret_cast<char*>(&x.s[8])), *(reinterpret_cast<char*>(&x.s[9])), *(reinterpret_cast<char*>(&x.s[10])), *(reinterpret_cast<char*>(&x.s[11])), *(reinterpret_cast<char*>(&x.s[12])), *(reinterpret_cast<char*>(&x.s[13])), *(reinterpret_cast<char*>(&x.s[14])), *(reinterpret_cast<char*>(&x.s[15]))})
#define as_uchar16(x) hetcompute::uchar16({*(reinterpret_cast<uchar*>(&x.s[0])), *(reinterpret_cast<uchar*>(&x.s[1])), *(reinterpret_cast<uchar*>(&x.s[2])), *(reinterpret_cast<uchar*>(&x.s[3])), *(reinterpret_cast<uchar*>(&x.s[4])), *(reinterpret_cast<uchar*>(&x.s[5])), *(reinterpret_cast<uchar*>(&x.s[6])), *(reinterpret_cast<uchar*>(&x.s[7])), *(reinterpret_cast<uchar*>(&x.s[8])), *(reinterpret_cast<uchar*>(&x.s[9])), *(reinterpret_cast<uchar*>(&x.s[10])), *(reinterpret_cast<uchar*>(&x.s[11])), *(reinterpret_cast<uchar*>(&x.s[12])), *(reinterpret_cast<uchar*>(&x.s[13])), *(reinterpret_cast<uchar*>(&x.s[14])), *(reinterpret_cast<uchar*>(&x.s[15]))})
#define as_short16(x) hetcompute::short16({*(reinterpret_cast<short*>(&x.s[0])), *(reinterpret_cast<short*>(&x.s[1])), *(reinterpret_cast<short*>(&x.s[2])), *(reinterpret_cast<short*>(&x.s[3])), *(reinterpret_cast<short*>(&x.s[4])), *(reinterpret_cast<short*>(&x.s[5])), *(reinterpret_cast<short*>(&x.s[6])), *(reinterpret_cast<short*>(&x.s[7])), *(reinterpret_cast<short*>(&x.s[8])), *(reinterpret_cast<short*>(&x.s[9])), *(reinterpret_cast<short*>(&x.s[10])), *(reinterpret_cast<short*>(&x.s[11])), *(reinterpret_cast<short*>(&x.s[12])), *(reinterpret_cast<short*>(&x.s[13])), *(reinterpret_cast<short*>(&x.s[14])), *(reinterpret_cast<short*>(&x.s[15]))})
#define as_ushort16(x) hetcompute::ushort16({*(reinterpret_cast<ushort*>(&x.s[0])), *(reinterpret_cast<ushort*>(&x.s[1])), *(reinterpret_cast<ushort*>(&x.s[2])), *(reinterpret_cast<ushort*>(&x.s[3])), *(reinterpret_cast<ushort*>(&x.s[4])), *(reinterpret_cast<ushort*>(&x.s[5])), *(reinterpret_cast<ushort*>(&x.s[6])), *(reinterpret_cast<ushort*>(&x.s[7])), *(reinterpret_cast<ushort*>(&x.s[8])), *(reinterpret_cast<ushort*>(&x.s[9])), *(reinterpret_cast<ushort*>(&x.s[10])), *(reinterpret_cast<ushort*>(&x.s[11])), *(reinterpret_cast<ushort*>(&x.s[12])), *(reinterpret_cast<ushort*>(&x.s[13])), *(reinterpret_cast<ushort*>(&x.s[14])), *(reinterpret_cast<ushort*>(&x.s[15]))})
#define as_int16(x) hetcompute::int16({*(reinterpret_cast<int*>(&x.s[0])), *(reinterpret_cast<int*>(&x.s[1])), *(reinterpret_cast<int*>(&x.s[2])), *(reinterpret_cast<int*>(&x.s[3])), *(reinterpret_cast<int*>(&x.s[4])), *(reinterpret_cast<int*>(&x.s[5])), *(reinterpret_cast<int*>(&x.s[6])), *(reinterpret_cast<int*>(&x.s[7])), *(reinterpret_cast<int*>(&x.s[8])), *(reinterpret_cast<int*>(&x.s[9])), *(reinterpret_cast<int*>(&x.s[10])), *(reinterpret_cast<int*>(&x.s[11])), *(reinterpret_cast<int*>(&x.s[12])), *(reinterpret_cast<int*>(&x.s[13])), *(reinterpret_cast<int*>(&x.s[14])), *(reinterpret_cast<int*>(&x.s[15]))})
#define as_uint16(x) hetcompute::uint16({*(reinterpret_cast<uint*>(&x.s[0])), *(reinterpret_cast<uint*>(&x.s[1])), *(reinterpret_cast<uint*>(&x.s[2])), *(reinterpret_cast<uint*>(&x.s[3])), *(reinterpret_cast<uint*>(&x.s[4])), *(reinterpret_cast<uint*>(&x.s[5])), *(reinterpret_cast<uint*>(&x.s[6])), *(reinterpret_cast<uint*>(&x.s[7])), *(reinterpret_cast<uint*>(&x.s[8])), *(reinterpret_cast<uint*>(&x.s[9])), *(reinterpret_cast<uint*>(&x.s[10])), *(reinterpret_cast<uint*>(&x.s[11])), *(reinterpret_cast<uint*>(&x.s[12])), *(reinterpret_cast<uint*>(&x.s[13])), *(reinterpret_cast<uint*>(&x.s[14])), *(reinterpret_cast<uint*>(&x.s[15]))})
#define as_long16(x) hetcompute::long16({*(reinterpret_cast<long*>(&x.s[0])), *(reinterpret_cast<long*>(&x.s[1])), *(reinterpret_cast<long*>(&x.s[2])), *(reinterpret_cast<long*>(&x.s[3])), *(reinterpret_cast<long*>(&x.s[4])), *(reinterpret_cast<long*>(&x.s[5])), *(reinterpret_cast<long*>(&x.s[6])), *(reinterpret_cast<long*>(&x.s[7])), *(reinterpret_cast<long*>(&x.s[8])), *(reinterpret_cast<long*>(&x.s[9])), *(reinterpret_cast<long*>(&x.s[10])), *(reinterpret_cast<long*>(&x.s[11])), *(reinterpret_cast<long*>(&x.s[12])), *(reinterpret_cast<long*>(&x.s[13])), *(reinterpret_cast<long*>(&x.s[14])), *(reinterpret_cast<long*>(&x.s[15]))})
#define as_ulong16(x) hetcompute::ulong16({*(reinterpret_cast<ulong*>(&x.s[0])), *(reinterpret_cast<ulong*>(&x.s[1])), *(reinterpret_cast<ulong*>(&x.s[2])), *(reinterpret_cast<ulong*>(&x.s[3])), *(reinterpret_cast<ulong*>(&x.s[4])), *(reinterpret_cast<ulong*>(&x.s[5])), *(reinterpret_cast<ulong*>(&x.s[6])), *(reinterpret_cast<ulong*>(&x.s[7])), *(reinterpret_cast<ulong*>(&x.s[8])), *(reinterpret_cast<ulong*>(&x.s[9])), *(reinterpret_cast<ulong*>(&x.s[10])), *(reinterpret_cast<ulong*>(&x.s[11])), *(reinterpret_cast<ulong*>(&x.s[12])), *(reinterpret_cast<ulong*>(&x.s[13])), *(reinterpret_cast<ulong*>(&x.s[14])), *(reinterpret_cast<ulong*>(&x.s[15]))})
#define as_float16(x) hetcompute::float16({*(reinterpret_cast<float*>(&x.s[0])), *(reinterpret_cast<float*>(&x.s[1])), *(reinterpret_cast<float*>(&x.s[2])), *(reinterpret_cast<float*>(&x.s[3])), *(reinterpret_cast<float*>(&x.s[4])), *(reinterpret_cast<float*>(&x.s[5])), *(reinterpret_cast<float*>(&x.s[6])), *(reinterpret_cast<float*>(&x.s[7])), *(reinterpret_cast<float*>(&x.s[8])), *(reinterpret_cast<float*>(&x.s[9])), *(reinterpret_cast<float*>(&x.s[10])), *(reinterpret_cast<float*>(&x.s[11])), *(reinterpret_cast<float*>(&x.s[12])), *(reinterpret_cast<float*>(&x.s[13])), *(reinterpret_cast<float*>(&x.s[14])), *(reinterpret_cast<float*>(&x.s[15]))})
#define as_double16(x) hetcompute::double16({*(reinterpret_cast<double*>(&x.s[0])), *(reinterpret_cast<double*>(&x.s[1])), *(reinterpret_cast<double*>(&x.s[2])), *(reinterpret_cast<double*>(&x.s[3])), *(reinterpret_cast<double*>(&x.s[4])), *(reinterpret_cast<double*>(&x.s[5])), *(reinterpret_cast<double*>(&x.s[6])), *(reinterpret_cast<double*>(&x.s[7])), *(reinterpret_cast<double*>(&x.s[8])), *(reinterpret_cast<double*>(&x.s[9])), *(reinterpret_cast<double*>(&x.s[10])), *(reinterpret_cast<double*>(&x.s[11])), *(reinterpret_cast<double*>(&x.s[12])), *(reinterpret_cast<double*>(&x.s[13])), *(reinterpret_cast<double*>(&x.s[14])), *(reinterpret_cast<double*>(&x.s[15]))})


